// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package greenlight

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies(title, year, runtime, genres)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, version
`

type CreateMovieParams struct {
	Title   string
	Year    int32
	Runtime int32
	Genres  []string
}

type CreateMovieRow struct {
	ID        int64
	CreatedAt pgtype.Timestamptz
	Version   int32
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (CreateMovieRow, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.Year,
		arg.Runtime,
		arg.Genres,
	)
	var i CreateMovieRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return i, err
}

const deleteMovies = `-- name: DeleteMovies :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovies(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMovies, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, created_at, title, year, runtime, genres, version
FROM movies
WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.Runtime,
		&i.Genres,
		&i.Version,
	)
	return i, err
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title = $1, year = $2, runtime = $3, genres = $4, version = version + 1
WHERE id = $5
RETURNING version
`

type UpdateMovieParams struct {
	Title   string
	Year    int32
	Runtime int32
	Genres  []string
	ID      int64
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.Title,
		arg.Year,
		arg.Runtime,
		arg.Genres,
		arg.ID,
	)
	var version int32
	err := row.Scan(&version)
	return version, err
}
